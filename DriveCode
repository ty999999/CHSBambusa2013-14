#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     bottomRight,   tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     bottomLeft,    tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     topRight,      tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_2,     topLeft,       tmotorTetrix, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
 /*
 * Davis Sparks for team 6226 Bambusa
 * ~licensed under the MIT license included in this repositiory
*/

#include "JoystickDriver.c"
#define LINNEAR_SCALE 1
#define SQUARE_SCALE 2
#define CUBE_SCALE 3


////////////////////////////////////////////////Scale Joystick///////////////////////////////////////////////////////////////
float scaleJoystick(float joyvalue, int scaletype)
{
        if(joyvalue <= 128 && joyvalue >= -128)
        {
                float res = joyvalue / 1.28;
                if(scaletype == 1) //linnear
                {
                        return res;
                }
                else if(scaletype == 2) //square
                {
                        res /= 100;
                        if(res < 0) return -(res*res)*100;
                        else return (res*res)*100;
                }
                else if(scaletype == 3) //cube
                {
                        res /= 100;
                        res = res*res*res;
                        return res*100;
                }
                else if(scaletype == 4) //sine
                {
                        res /= 100;
                        //res = (Math.sin(res)/PI) * 180;
                        return res / 0.9;
                }
                else if(scaletype == 5) //root
                {
                        res /= 100;
                        //res = Math.sqrt(res);
                        return res * 100;
                }
                //else return error_t;
        }
        return 0;
}

//////////////////////////////////////////////////Clamp////////////////////////////////////////////////////////////////////

float clamp(float value, float lower, float upper)
{
        if(value > upper) return upper;
        if(value < lower) return lower;
        return value;
}
////////////////////////////////////////////////////SET MOTOR/////////////////////////////////////////////////////////////
bool setMotor(tMotor motorname, float value)
{
        if(value <= 100 && value >= -100)
        {
                motor[motorname] = value;
                return true;
        }
        return false;
}

void stop()
{
        setMotor(topRight, 0);
        setMotor(topLeft, 0);
        setMotor(bottomRight, 0);
        setMotor(bottomLeft, 0);
        return;
}
//////////////////////////////////////////////////MOVE MOTORS////////////////////////////////////////////////////////////
bool moveMotors(float tr, float tl, float br, float bl)
{
        bool success = true;
        success = setMotor(topLeft, tr);
        if(success) success = setMotor(topRight, tl);
        if(success) success = setMotor(bottomLeft, br);
        if(success) success = setMotor(bottomRight, bl);

        if(!success)
        {
                stop();
                return false;
        }
        return true;
}





/////////////////////////////////////////////////////GET JOYSTICK/////////////////////////////////////////////////////////
float getJoystick(int user, int stick, char axis)
{
        getJoystickSettings(joystick);
        if(user == 1)
        {
                if(stick == 1)
                {
                        if(axis == 'x')
                        {
                                return joystick.joy1_x1;
                        }
                        else if(axis == 'y')
                        {
                                return joystick.joy1_y1;
                        }
                        else return -1;
                }
                else if(stick == 2)
                {
                        if(axis == 'x')
                        {
                                return joystick.joy1_x2;
                        }
                        else if(axis == 'y')
                        {
                                return joystick.joy1_y2;
                        }
                        else return -1;
                }
                else return -1;
        }
        else if(user == 2)
        {
                if(stick == 1)
                {
                        if(axis == 'x')
                        {
                                return joystick.joy2_x1;
                        }
                        else if(axis == 'y')
                        {
                                return joystick.joy2_y1;
                        }
                        else return -1;
                }
                else if(stick == 2)
                {
                        if(axis == 'x')
                        {
                                return joystick.joy2_x2;
                        }
                        else if(axis == 'y')
                        {
                                return joystick.joy2_y2;
                        }
                        else return -1;
                }
                else return -1;
        }
        else return -1;

        return -1;
}

/////////////////////////////////////////////////////JOYSTICK MOVE/////////////////////////////////////////////////////


bool joystickMove(int sticknum, int min, int max, int scale)
{
        float xval = getJoystick(1, sticknum, 'x');
        float yval = getJoystick(1, sticknum, 'y');

        yval = scaleJoystick(yval, scale);
        xval = scaleJoystick(xval, scale);

        float rval = yval - xval;
        float lval = yval + xval;

        if(rval <= min && rval >= -min) rval = 0;
        if(lval <= min && lval >= -min) lval = 0;

        rval = rval * (max*0.01);
        lval = lval * (max*0.01);

        rval = clamp(rval, -100, 100);
        lval = clamp(lval, -100, 100);

        return moveMotors(lval,rval,lval,rval);
}

//////////////////////////////////////////////////Test/////////////////////////////////////

task main()
{
while(true)
 {
   getJoystickSettings(joystick);
   joystickMove(1, 10, 100, 1);
 }

}
